"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>d});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=p(t),g=a,d=u["".concat(c,".").concat(g)]||u[g]||m[g]||l;return t?r.createElement(d,i(i({ref:n},s),{},{components:t})):r.createElement(d,i({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=g;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},76647:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const l={},i="Replica",o={type:"mdx",permalink:"/Replica/",source:"@site/pages/index.md",title:"Replica",description:"IMPORTANT",frontMatter:{}},c=[{value:"IMPORTANT",id:"important",level:2},{value:"Server Usage",id:"server-usage",level:2},{value:"Creating a Token",id:"creating-a-token",level:3},{value:"Creating a Replica",id:"creating-a-replica",level:3},{value:"Changing Values",id:"changing-values",level:3},{value:"Destroying a Replica",id:"destroying-a-replica",level:3},{value:"Client Usage",id:"client-usage",level:2},{value:"Setting up Listeners",id:"setting-up-listeners",level:3},{value:"Receiving Replicas",id:"receiving-replicas",level:3},{value:"ReplicaService",id:"replicaservice",level:2}],p={toc:c},s="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(s,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"replica"},"Replica"),(0,a.kt)("h2",{id:"important"},"IMPORTANT"),(0,a.kt)("p",null,"In these examples, Replica is the Package required like below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local Replica = require(Packages.Replica)\n")),(0,a.kt)("h2",{id:"server-usage"},"Server Usage"),(0,a.kt)("h3",{id:"creating-a-token"},"Creating a Token"),(0,a.kt)("p",null,"Tokens are used to identify different types of ",(0,a.kt)("strong",{parentName:"p"},"Replicas"),". You cannot register a Token\nmore than once, but you ",(0,a.kt)("em",{parentName:"p"},"can")," and ",(0,a.kt)("em",{parentName:"p"},"should")," use it multiple times for the same type of replica."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local inventoryToken = Replica.Service:RegisterToken("PlayerInventory")\n')),(0,a.kt)("h3",{id:"creating-a-replica"},"Creating a Replica"),(0,a.kt)("p",null,"This replica's Filter is set to ",(0,a.kt)("strong",{parentName:"p"},"Include")," and so players in the ",(0,a.kt)("strong",{parentName:"p"},"FilterList"),"\nwill receive this replica on their client."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local player -- A player in the game\nlocal replica: Replica.Server = Replica.Service:NewReplica({\n    Token = inventoryToken,\n    Tags = { -- Tags are only replicated once upon the creation of the replica\n        ownerId = player.UserId,\n    },\n    Data = { -- Data is replicated when changed\n        money = 0,\n        items = {\n            [1] = "axe",\n        },\n    },\n    Filter = "Include", -- "Include" or "Exclude" or "All"\n    FilterList = {\n        [player] = true,\n    },\n})\n')),(0,a.kt)("h3",{id:"changing-values"},"Changing Values"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'replica:SetValue("money", 50)\nreplica:SetValue({"items", 1}, "pickaxe") -- Cannot use string ("items.1") syntax here because 1 is a number, not a string\n')),(0,a.kt)("h3",{id:"destroying-a-replica"},"Destroying a Replica"),(0,a.kt)("p",null,"This will cleanup the Replica and destroy it on the client as well."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"replica:Destroy()\n")),(0,a.kt)("h2",{id:"client-usage"},"Client Usage"),(0,a.kt)("h3",{id:"setting-up-listeners"},"Setting up Listeners"),(0,a.kt)("p",null,"Before calling ",(0,a.kt)("strong",{parentName:"p"},"Replica.Controller:RequestData()"),", you must first setup your listeners\nto listen for incoming replicas."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Players = game:GetService("Players")\n-- Listen for new "PlayerInventory" Replicas\nReplica.Controller:OnNewReplicaWithToken("PlayerInventory", function(replica: Replica.Client)\n    local owner = Players:GetPlayerByUserId(replica.Tags.ownerId)\n    if not owner then return end\n\n    -- When receiving the replica, we want to listen for changes in "money" or other values\n    replica:OnChange("money", function(new: number, old: number)\n        print(owner.Name .. "\'s money went from $" .. old .. " to $" .. new)\n    end)\n\n    -- OR\n\n    replica:OnChange({"money"}, function(new: number, old: number)\n        print(owner.Name .. "\'s money went from $" .. old .. " to $" .. new)\n    end)\n\n    -- Example use for array {} path syntax\n    replica:OnChange({"items", 1}, function(new: string, old: string)\n        print(owner.Name .. " changed item slot 1 from " .. old .. " to " .. new)\n    end)\n\n    print(owner.Name .. " has $" .. replica.Data.money .. " and " .. #replica.Data.items .. " items")\nend)\n')),(0,a.kt)("h3",{id:"receiving-replicas"},"Receiving Replicas"),(0,a.kt)("p",null,"After setting up your listeners, you can then call"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"Replica.Controller:RequestData()\n")),(0,a.kt)("h2",{id:"replicaservice"},"ReplicaService"),(0,a.kt)("p",null,"This library is extremely similar to ",(0,a.kt)("a",{parentName:"p",href:"https://madstudioroblox.github.io/ReplicaService/"},"ReplicaService")," by MadStudio."))}u.isMDXComponent=!0}}]);